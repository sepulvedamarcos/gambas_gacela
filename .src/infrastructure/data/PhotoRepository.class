' Gambas class file

'
'
' Clase de acceso a datos en BD
'
'
Private $log4Gambas As Log4Gambas3
Private $dbContext As SQLiteContext
Private $configuration As Configuration

Property Read DBContext As SQLiteContext

' ==================================================
'
'          Metodos publicos
'
' ==================================================
Public Sub _new(configuration As Configuration, logger As Log4Gambas3, context As SQLiteContext)

  $log4Gambas = logger
  $dbContext = context
  $configuration = configuration

End

Public Function getPhotos(Optional id As Integer) As PhotoEntity[]

  Dim photo As PhotoEntity
  Dim photos As PhotoEntity[]
  Dim photoResult As Result
  Dim query As String

  $log4Gambas.Debug("Extraccion de fotos")

  query = "soft_delete = &1"
  If id > 0 Then
    query = "AND id = " & id
  End If

  photoResult = $dbContext.DBConnection.Find(Constants.TABLE_PHOTOS, query, False)

  If photoResult.Available Then
    $log4Gambas.Debug("Extraccion de " & photoResult.Count & " fotos de la respuesta")

    Return MapResultToEntities(photoResult)

  Endif

Catch
  $log4Gambas.Error("Problemas para recuperar las fotos " & Error.Text)
  Error.Propagate

End

Public Function FindWithFilters(whereClause As String, params As Variant[], sortBy As String, sortOrder As String, limit As Integer, offset As Integer) As PhotoEntity[]

  Dim result As Result
  Dim query As String
  Dim orderBy As String = "import_date"
  Dim orderType As String = "desc"

  $log4gambas.Debug("Repository: Ejecutando query con filtros")

  If sortBy <> "" Then
    orderBy = orderBy
  Endif
  If sortOrder <> "" Then
    orderType = sortOrder
  Endif
  orderBy &= " " & orderType

  ' Ejecutar query con LIMIT y OFFSET
  ' En Gambas, Find no soporta directamente LIMIT/OFFSET
  ' Debemos usar Exec con SQL
  query = "SELECT * FROM " & Constants.TABLE_PHOTOS &
    " WHERE " & whereClause &
    " ORDER BY " & orderBy &
    " LIMIT " & limit &
    " OFFSET " & offset

  ' Convertir params a array para Exec
  result = $dbContext.Exec(query, params)

  If result.Available Then
    Return MapResultToEntities(result)
  Endif

Catch
  $log4gambas.Error("Error en FindWithFilters: " & Error.Text)

  Return New PhotoEntity[]

End

Public Function CountWithFilters(whereClause As String, params As Variant[]) As Integer

  Dim result As Result
  Dim query As String

  query = "SELECT COUNT(*) as total FROM " & Constants.TABLE_PHOTOS &
    " WHERE " & whereClause
  result = $dbContext.Exec(query, params)

  If result.Available Then
    Return result["total"]
  Endif

Catch
  $log4gambas.Error("Error en CountWithFilters: " & Error.Text)

  Return 0

End

Public Function createPhoto(photo As PhotoEntity) As PhotoEntity

  Dim result As Result

  result = $dbContext.DBConnection.Create(Constants.TABLE_PHOTOS)

  result["file_name"] = photo.FileName
  result["width_pixels"] = photo.WidthPixels
  result["height_pixels"] = photo.HeightPixels
  result["creation_date"] = Now()
  result["import_date"] = photo.ImportDate
  result["description"] = photo.Description
  result["stars"] = photo.Stars
  result["import_user"] = photo.ImportUser
  result["image_path"] = photo.ImagePath
  result["hash256"] = photo.Hash256
  result["thumbnail"] = photo.Thumbnail
  result["last_sync_date"] = Null
  result["sync_status"] = 0
  result["soft_delete"] = False
  result["soft_deleted_date"] = Null
  result["soft_deleted_by"] = Null
  result["soft_deleted_auto"] = Null
  result["is_locked"] = False
  result["locked_by"] = Null
  result["locked_date"] = Null
  result["lock_reason"] = Null

  result.Update()

End

' ==================================================
'
'          Metodos privados
'
' ==================================================

Private Function MapResultToEntities(result As Result) As PhotoEntity[] '' Mapeo privado dentro del Repository

  Dim photo As PhotoEntity
  Dim photos As New PhotoEntity[]

  For Each Result
    photo = New PhotoEntity

    ' Mapear todos los campos
    photo.Id = result["id"]
    photo.FileName = result["file_name"]
    photo.WidthPixels = IIf(result["width_pixels"] <> Null, result["width_pixels"], 0)
    photo.HeightPixels = IIf(result["height_pixels"] <> Null, result["height_pixels"], 0)
    photo.CreationDate = result["creation_date"]
    photo.ImportDate = result["import_date"]
    photo.Description = result["description"]
    photo.Stars = result["stars"]
    photo.ImportUser = result["import_user"]
    photo.ImagePath = Result["image_path"]
    photo.Hash256 = result["hash256"]
    photo.Thumbnail = result["thumbnail"]
    photo.LastSyncDate = result["last_sync_date"]
    photo.SyncStatus = result["sync_status"]
    photo.SoftDelete = result["soft_delete"]
    photo.SoftDeleteDate = result["soft_deleted_date"]
    photo.SoftDeleteBy = result["soft_deleted_by"]
    photo.SoftDeleteAuto = result["soft_deleted_auto"]
    photo.IsLocked = result["is_locked"]
    photo.LockedBy = result["locked_by"]
    photo.Lockreason = result["lock_reason"]

    photos.Add(photo)

  Next

  Return photos

Catch
  Error.Propagate

End

Private Sub MapEntityToResult(photo As PhotoEntity, result As Result) '' Mapeo privado Entity â†’ Result

  result["file_name"] = photo.FileName
  result["md5_hash"] = photo.MD5Hash
  result["original_size"] = photo.OriginalSize
  result["compressed_size"] = photo.CompressedSize
  result["width_pixels"] = photo.WidthPixels
  result["height_pixels"] = photo.HeightPixels
  result["original_format"] = photo.OriginalFormat
  result["creation_date"] = photo.CreationDate
  result["import_date"] = photo.ImportDate
  result["description"] = photo.Description
  result["is_favorite"] = photo.IsFavorite
  result["import_user"] = photo.ImportUser
  result["soft_delete"] = Not photo.SoftDelete
  result["compressed_photo"] = photo.CompressedPhoto
  result["thumbnail"] = photo.Thumbnail
  result["compression_level"] = photo.CompressionLevel
  result["last_sync_date"] = photo.LastSyncDate

End

Private Function DBContext_Read() As SQLiteContext

  Return $dbContext

End
