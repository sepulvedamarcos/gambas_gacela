' Gambas class file

'
'
' Clase de manejo de negocio
'
'
Private $log4gambas As Log4Gambas3
Private $photoRepository As PhotoRepository
Private $compressionService As CompressionService
Private $configuration As Configuration
Private $iterator As PhotoIterator
Private $titulo As String = "[PhotoService] "

' ==================================================
'
'          Metodos publicos
'
' ==================================================
Public Sub _new(log4gambas As Log4Gambas3, photorepository As PhotoRepository, compressionService As CompressionService, configuration As Configuration)

  $log4gambas = log4gambas
  $photoRepository = photoRepository
  $compressionService = compressionService
  $configuration = configuration
  $iterator = New PhotoIterator($photoRepository, $log4gambas)

End

Public Function GetAllPhotos() As PhotoEntity[]

  Dim photosEntity As PhotoEntity[]

  Try photosEntity = $photoRepository.getPhotos()
  If Error Then
    $log4gambas.Error("Error al leer las fotos " & Error.Text)
    error.Propagate
  Endif

  Return photosEntity

End

Public Function loadFirstPage() As PhotoEntity[] '' Metodo para cargar la primera pagina usando filtros definidos anteriormente

  $iterator.Reset
  Return $iterator.LoadNextBatch()

End

Public Function loadNextPage() As PhotoEntity[] '' Metodo para cargar paginas segun filtros definidos en pantalla

  ' $iterator.Reset
  Return $iterator.LoadNextBatch()

End

Public Function ToggleFavorite(photoId As Integer, stars As Integer) As Boolean

  Dim photo As PhotoEntity

  Return True

End

Public Sub DeletePhoto(photoId As Integer) As Boolean

  Return True

Catch
  $log4gambas.error("Ocurrio un problema al elimianar la foto")
  Error.Propagate

End

Public Sub InsertSeedData() '' Metodo que permite inicializar la base de datos con 2 fotos

  $log4gambas.Info("Insertando datos de prueba en tabla photos...")

  If SavePhoto(Constants.PHOTO_SEED_1, "Foto 1") Then Error.Raise("Error al insertar foto 1")
  Wait 1 ' esperamos un poco para generacion de codigo
  If SavePhoto(Constants.PHOTO_SEED_2, "Foto 2") Then Error.Propagate

  $log4gambas.Info("Datos de prueba insertados exitosamente")

Catch
  $log4gambas.Error("Error insertando foto de prueba " & Error.Text)

End

Public Sub ToggleLibrary(lib As Integer) '' Metodo que sirve para cambiar la libreria activa

  'Asignacion del valor
  $configuration.SetWichLibrary(lib)
  ' Notificar al contexto DB Accediendo a DBContext a trav√©s del Repository
  $photoRepository.DBContext.SwitchLibrary()

Catch
  Error.Propagate

End

Public Sub ImportPhotos(imagesPath As String[], album As String, tags As String)

  Dim photo As String

  For Each photo In imagesPath

    $log4gambas.Debug($titulo & "Archivo a procesar " & photo)
    If SavePhoto(photo, album) Then
      Error.Raise("Error al insertar foto" & photo)
    End If

  Next

Catch
  $log4gambas.Error("Error insertando foto " & Error.Text)

End

Public Function GetPhotoIterator() As PhotoIterator

  Return New PhotoIterator($photoRepository, $log4gambas)

End

Public Function FindAlbums(album As String) As AlbumEntity[]

  $log4gambas.Debug($titulo & "album :" & album)

  Return New AlbumEntity[]

End

' ==================================================
'
'          Metodos privados
'
' ==================================================

Private Function SavePhoto(imagenPath As String, album As String) As Boolean

  Dim photoEntity As New PhotoEntity
  Dim originalPhoto As Image
  Dim imageString As String
  Dim hash256 As String
  Dim filename As String = File.BaseName(imagenPath) & "." & File.Ext(imagenPath)
  Dim newPath As String

  ' Cargar imagen original
  originalPhoto = Image.Load(imagenPath)
  imageString = File.Load(imagenPath)

  hash256 = $compressionService.hash256Calculate(imageString)

  If $compressionService.ValidateFileExist(filename) Then
    Error.Raise("El archivo " & filename & " ya existe")
  End If
  If $photoRepository.ValidateHash256Exist(hash256) Then
    Error.Raise("El archivo " & filename & " ya existe")
  End If

  newPath = $compressionService.SaveImageIO(imagenPath)

  photoEntity.FileName = filename
  photoEntity.WidthPixels = originalPhoto.Width
  photoEntity.HeightPixels = originalPhoto.Height
  photoEntity.ImportDate = Now()
  photoEntity.Description = ""
  photoEntity.Stars = 0
  photoEntity.ImportUser = User.Name
  photoEntity.ImagePath = newPath
  photoEntity.Hash256 = hash256
  photoEntity.Thumbnail = $compressionService.CreateThumbnail(originalPhoto, imagenPath)

  photoEntity = $photoRepository.createPhoto(photoEntity)

  Return photoEntity

Catch
  Kill newPath &/ filename
  $log4gambas.Error("Error importando foto: " & Error.Text)
  Error.Propagate

End
